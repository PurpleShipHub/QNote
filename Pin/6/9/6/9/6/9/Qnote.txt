Question 3
What role does the step parameter play in the range() function within a FOR loop, and how can it modify the iteration process? 
Answer: The step parameter in the range() function determines the increment or decrement between consecutive values during iteration, with a default value of 1. It allows beginners to customize the sequence
e.g., using a step of 2 for even numbers or a negative step for descending orderâ€”thus controlling the loop's progression.
Question 4
Why is it essential for novice programmers to understand the stop parameter in the range() function when designing a FOR loop? 
Answer: Understanding the stop parameter is crucial as it defines the upper bound (exclusive) of the sequence generated by range(), ensuring the loop terminates at the intended point. For beginners, this knowledge prevents unintended iterations, enabling accurate control over the output range.
________________________________________
Theoretical with Code Questions
Question 5
How does a FOR loop utilize a counter variable to iterate and display numerical values, and what is the resulting output? 
Answer: A FOR loop employs a counter variable to track and update the current iteration value, facilitating sequential processing.
 The code for number in range(3): print(number) iterates three times, assigning number the values 0, 1, and 2, resulting in the output: 0, 1, 2.
________________________________________
Question 6
What is the purpose of a collection in a FOR loop, and how can it be implemented to output a specific sequence of numbers? 
Answer: A collection serves as the iterable sequence that a FOR loop processes, determining the number of iterations and values accessed. The code for value in range(1, 5): print(value) uses the collection 1, 2, 3, 4, producing the output: 1, 2, 3, 4.
________________________________________
Question 7
How can a FOR loop with the range() function be used to display the first three multiples of 3, and what is the output? 
Answer: A FOR loop can use range() with an appropriate step to generate multiples of 3, starting from the first multiple. The code for i in range(3, 10, 3): print(i) iterates over 3, 6, 9, outputting these as the first three multiples of 3.
________________________________________
Question 8
How does a FOR loop with a negative step value enable backward counting, and what is the resulting output? 
Answer: A negative step value in a FOR loop with range() allows the iteration to decrement, enabling backward counting from a higher to a lower value. The code for x in range(5, 1, -1): print(x) iterates from 5 to 2, producing the output: 5, 4, 3, 2.
